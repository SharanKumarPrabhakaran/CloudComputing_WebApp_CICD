name: Build Packer on Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  packer-merge-build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2

      - name: Set up MySQL
        run: |
          sudo systemctl start mysql
          sudo systemctl status mysql

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Install Maven
        run: |
          sudo apt update
          sudo apt install maven -y

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Use gcloud CLI
        run: 'gcloud info'

      - name: Build Application with Maven and Run Integration Test
        run: |
          echo "LOG_FILE_PATH:  ${{ secrets.LOG_FILE_PATH }}" >> .env
          mvn clean install
          pwd
          mkdir cloud && cp target/csye6225-0.0.1-SNAPSHOT.jar cloud   
          cp cloud/*.jar packer
          cd packer && ls -al
        env:
          MYSQL_DB_USERNAME: ${{ secrets.MYSQL_DB_USERNAME }}
          MYSQL_DB_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
          MYSQL_DB_DATABASE: ${{ secrets.MYSQL_DB_DATABASE }}
          MYSQL_DB_HOST: ${{ secrets.MYSQL_DB_HOST }}
          MYSQL_DB_PORT: ${{ secrets.MYSQL_DB_PORT }}
          GCP_PUBSUB_TOPIC_NAME: ${{ secrets.GCP_PUBSUB_TOPIC_NAME }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main

      - name: Initialize Packer
        run: |
          cd packer
          packer init .

      - name: Format check Packer
        run: |
          cd packer
          packer fmt -check .
           if [ $? -ne 0 ]; then
            echo "Packer template was modified by 'packer fmt' command."
          fi

      - name: Validate Packer
        run: |
          cd packer
          packer validate .
          if [ $? -ne 0 ]; then
            echo "Packer template validation failed."
          fi
        env:
          PKR_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          PKR_VAR_gcp_zone: ${{ secrets.GCP_ZONE }}
          PKR_VAR_ssh_username : ${{ secrets.PACKER_SSH_USERNAME }}
          PKR_VAR_source_image_family: ${{ secrets.SOURCE_IMAGE_FAMILY }}
          PKR_VAR_network: ${{ secrets.NETWORK }}
          PKR_VAR_image_storage_locations: ${{ secrets.IMAGE_STORAGE_LOCATIONS }}
          PKR_VAR_image_name: ${{ secrets.IMAGE_NAME }}
          PKR_VAR_image_family: ${{ secrets.IMAGE_FAMILY }}
          PKR_VAR_image_description : ${{ secrets.IMAGE_DESCRIPTION }}
          PKR_VAR_build_name : ${{ secrets.BUILD_NAME }}

      - name: Check if any job failed
        if: ${{ failure() }}
        run: exit 1

      - name: Build Packer
        run: |
          cd packer
          packer build .
        env:
          PKR_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          PKR_VAR_gcp_zone: ${{ secrets.GCP_ZONE }}
          PKR_VAR_ssh_username : ${{ secrets.PACKER_SSH_USERNAME }}
          PKR_VAR_source_image_family: ${{ secrets.SOURCE_IMAGE_FAMILY }}
          PKR_VAR_network: ${{ secrets.NETWORK }}
          PKR_VAR_image_storage_locations: ${{ secrets.IMAGE_STORAGE_LOCATIONS }}
          PKR_VAR_image_name: ${{ secrets.IMAGE_NAME }}
          PKR_VAR_image_family: ${{ secrets.IMAGE_FAMILY }}
          PKR_VAR_image_description : ${{ secrets.IMAGE_DESCRIPTION }}
          PKR_VAR_build_name : ${{ secrets.BUILD_NAME }}

      - name: Generate Random Number
        id: random_number
        run: echo "::set-output name=random_number::$RANDOM"

      - name: Create new Instance Template
        run: |
          random_number=${{ steps.random_number.outputs.random_number }}
          instance_template="test-instance-template-${random_number}"
          latest_image_name=$(gcloud compute images list --no-standard-images --format="table(NAME,CREATION_TIMESTAMP)" --sort-by="CREATION_TIMESTAMP" | tail -n 1)
          echo "$latest_image_name"
          latest_image_path="projects/${{ secrets.GCP_PROJECT_ID }}/global/images/$latest_image_name"
          
          gcloud compute instance-templates create $instance_template \
          --description="${{ secrets.GCP_TEMPLATE_DESCRIPTION }}" \
          --region=${{ secrets.REGION }} \
          --instance-template-region=${{ secrets.REGION }} \
          --machine-type=${{ secrets.MACHINE_TYPE }} \
          --tags=${{ secrets.TAGS }} \
          --labels=environment=${{ secrets.LABEL }} \
          --image=$latest_image_path \
          --boot-disk-auto-delete \
          --boot-disk-type=${{ secrets.DISK_TYPE }} \
          --boot-disk-size=${{ secrets.DISK_SIZE }} \
          --network-interface=subnet=${{ secrets.SUBNET_PROD }},network=${{ secrets.NETWORK_PROD }},network-tier=${{ secrets.NETWORK_TIER }} \
          --service-account=${{ secrets.VM_SERVICE_ACCOUNT }} \
          --scopes=${{ secrets.VM_SCOPES }} \
          --boot-disk-kms-key=projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.REGION }}/keyRings/${{ secrets.KEY_RING }}/cryptoKeys/${{ secrets.VM_KEY }} \
          --metadata=startup-script="#! /bin/bash
          echo 'Startup script'
          cd /opt/cloud
          echo 'MYSQL_DB_USERNAME=${{ secrets.MYSQL_DB_USERNAME_PROD }}' >> .env
          echo 'MYSQL_DB_PASSWORD=${{ secrets.MYSQL_DB_PASSWORD_PROD }}' >> .env
          echo 'MYSQL_DB_DATABASE=${{ secrets.MYSQL_DB_DATABASE_PROD }}' >> .env
          echo 'MYSQL_DB_HOST=${{ secrets.MYSQL_DB_HOST_PROD }}' >> .env
          echo 'MYSQL_DB_PORT=${{ secrets.MYSQL_DB_PORT }}' >> .env
          echo 'LOG_FILE_PATH=${{ secrets.LOG_FILE_PATH_PROD }}' >> .env
          echo 'GCP_PUBSUB_TOPIC_NAME=${{ secrets.GCP_PUBSUB_TOPIC_NAME }}' >> .env
          echo 'GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}' >> .env"

      - name: Update the Managed Instance Group with the new Instance Template and Start rolling update for the VMs
        run: |
          random_number=${{ steps.random_number.outputs.random_number }}
          instance_template="test-instance-template-${random_number}"  
          gcloud compute instance-groups managed set-instance-template ${{ secrets.GCP_INSTANCE_GROUP }} --template=projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.REGION }}/instanceTemplates/$instance_template --region=${{ secrets.REGION }}
          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.GCP_INSTANCE_GROUP }} --version=template=projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.REGION }}/instanceTemplates/$instance_template --region=${{ secrets.REGION }} --replacement-method=${{ secrets.REPLACEMENT_METHOD }}

      - name: Wait Until the Managed Instance Group refresh for all the VMs are complete
        run: |
          gcloud compute instance-groups managed wait-until ${{ secrets.GCP_INSTANCE_GROUP }} --version-target-reached --region=${{ secrets.REGION }}
      

